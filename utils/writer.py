from torch.utils.tensorboard import SummaryWriter
from datetime import datetime
import os


class Writer(SummaryWriter):

    def __init__(self, model_name: str):
        timestamp = str(datetime.now().strftime("%d-%m-%Y_%H-%M-%S"))
        log_dir = os.path.join("runs", model_name, timestamp).replace("\\", "/")
        super().__init__(log_dir)

    # Autogenerated stuff, currently just here to have an overview of all methods

    def add_scalar(self, tag, scalar_value, global_step=None, walltime=None):
        super().add_scalar(tag, scalar_value, global_step, walltime)
        self.flush()

    def add_scalars(self, main_tag, tag_scalar_dict, global_step=None, walltime=None):
        super().add_scalars(main_tag, tag_scalar_dict, global_step, walltime)
        self.flush()

    def add_histogram(
        self,
        tag,
        values,
        global_step=None,
        bins="tensorflow",
        walltime=None,
        max_bins=None,
    ):
        super().add_histogram(tag, values, global_step, bins, walltime, max_bins)
        self.flush()

    def add_image(
        self, tag, img_tensor, global_step=None, walltime=None, dataformats="CHW"
    ):
        super().add_image(tag, img_tensor, global_step, walltime, dataformats)
        self.flush()

    def add_images(
        self, tag, img_tensor, global_step=None, walltime=None, dataformats="NCHW"
    ):
        super().add_images(tag, img_tensor, global_step, walltime, dataformats)
        self.flush()

    def add_audio(
        self, tag, snd_tensor, global_step=None, sample_rate=44100, walltime=None
    ):
        super().add_audio(tag, snd_tensor, global_step, sample_rate, walltime)
        self.flush()

    def add_text(self, tag, text_string, global_step=None, walltime=None):
        super().add_text(tag, text_string, global_step, walltime)
        self.flush()

    def add_graph(self, model, input_to_model=None, verbose=False):
        super().add_graph(model, input_to_model, verbose)
        self.flush()

    def add_embedding(
        self,
        mat,
        metadata=None,
        label_img=None,
        global_step=None,
        tag="default",
        metadata_header=None,
    ):
        super().add_embedding(
            mat, metadata, label_img, global_step, tag, metadata_header
        )
        self.flush()

    def add_pr_curve(
        self,
        tag,
        labels,
        predictions,
        global_step=None,
        num_thresholds=127,
        weights=None,
        walltime=None,
    ):
        super().add_pr_curve(
            tag, labels, predictions, global_step, num_thresholds, weights, walltime
        )
        self.flush()
